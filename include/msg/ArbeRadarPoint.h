// Generated by gencpp from file DualRadar/ArbeRadarPoint.msg
// DO NOT EDIT!


#ifndef DUALRADAR_MESSAGE_ARBERADARPOINT_H
#define DUALRADAR_MESSAGE_ARBERADARPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace DualRadar
{
template <class ContainerAllocator>
struct ArbeRadarPoint_
{
  typedef ArbeRadarPoint_<ContainerAllocator> Type;

  ArbeRadarPoint_()
    : id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , rcs(0.0)
    , doppler(0.0)  {
    }
  ArbeRadarPoint_(const ContainerAllocator& _alloc)
    : id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , rcs(0.0)
    , doppler(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _rcs_type;
  _rcs_type rcs;

   typedef float _doppler_type;
  _doppler_type doppler;





  typedef boost::shared_ptr< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> const> ConstPtr;

}; // struct ArbeRadarPoint_

typedef ::DualRadar::ArbeRadarPoint_<std::allocator<void> > ArbeRadarPoint;

typedef boost::shared_ptr< ::DualRadar::ArbeRadarPoint > ArbeRadarPointPtr;
typedef boost::shared_ptr< ::DualRadar::ArbeRadarPoint const> ArbeRadarPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::DualRadar::ArbeRadarPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::DualRadar::ArbeRadarPoint_<ContainerAllocator1> & lhs, const ::DualRadar::ArbeRadarPoint_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.rcs == rhs.rcs &&
    lhs.doppler == rhs.doppler;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::DualRadar::ArbeRadarPoint_<ContainerAllocator1> & lhs, const ::DualRadar::ArbeRadarPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace DualRadar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "856851b9349e17ac6a559d4258288fe3";
  }

  static const char* value(const ::DualRadar::ArbeRadarPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x856851b9349e17acULL;
  static const uint64_t static_value2 = 0x6a559d4258288fe3ULL;
};

template<class ContainerAllocator>
struct DataType< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "DualRadar/ArbeRadarPoint";
  }

  static const char* value(const ::DualRadar::ArbeRadarPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ARBE pointcloud format.\n"
"\n"
"uint32 id               # ID\n"
"float32 x               # X axis, unit:m\n"
"float32 y               # Y axis, unit:m\n"
"float32 z               # Z axis, unit:m\n"
"float32 rcs             # reflectivity, 0~255\n"
"float32 doppler         # livox tag\n"
"\n"
"\n"
;
  }

  static const char* value(const ::DualRadar::ArbeRadarPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.rcs);
      stream.next(m.doppler);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArbeRadarPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::DualRadar::ArbeRadarPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::DualRadar::ArbeRadarPoint_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "rcs: ";
    Printer<float>::stream(s, indent + "  ", v.rcs);
    s << indent << "doppler: ";
    Printer<float>::stream(s, indent + "  ", v.doppler);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUALRADAR_MESSAGE_ARBERADARPOINT_H
